#ifndef FTL_STRING
#define FTL_STRING

#include <ftl/iterator>
#include <algorithm>

namespace ftl {
	template <
		typename CharT,
		class Allocator = std::allocator<CharT>
	>
	class basic_string {
	public:
		using value_type = CharT;
		using allocator_type = Allocator;
		using size_type = allocator_traits::size_type;
		using difference_type = allocator_traits::difference_type;
		using reference = CharT&;
		using const_reference = const CharT&;
		using pointer = CharT*;
		using const_pointer = const CharT*;
		class iterator;
		class const_iterator;
		using reverse_iterator = ftl::reverse_iterator<iterator>;
		using const_reverse_iterator = ftl::const_reverse_iterator<iterator>;

		constexpr explicit basic_string(const Allocator& alloc) noexcept
		: b_(nullptr), s_(0), c_(0), a_(alloc)
		{}

		constexpr basic_string() noexcept : basic_string(Allocator()) {}

		constexpr basic_string(size_type count,
			CharT ch, const Allocator& alloc = Allocator())
		: s_(count), c_(count), a_(alloc)
		{
			b_ = s_ < sb_size ? sb_ : allocator_traits::allocate(a_, c_);
			std::fill_n(b_, s_, ch);
		}



	private:
		using allocator_traits = std::allocator_traits<Allocator>;
		constexpr size_t sbsize_ = 30;
		CharT b_;
		CharT sb_[sbsize_];
		size_type s_;
		size_type c_;
		Allocator a_;
	};
}

#endif
