#ifndef FTL_FORWARD_LIST
#define FTL_FORWARD_LIST

#include <cstddef>
#include <memory>
#include <utility>
#include <algorithm>
#include <initializer_list>
#include <iterator>
#include <ftl/utility>
#include <ftl/iterator>

namespace ftl {
	template <typename T>
	struct fwd_list_node {
		using value_type = T;

		constexpr fwd_list_node() : next_(nullptr) {}

		constexpr explicit fwd_list_node(const T& data, fwd_list_node<T>* next = nullptr)
			: data_(data), next_(next) {}

		template <typename... Args>
		constexpr explicit fwd_list_node(Args&&... args, fwd_list_node<T>* next = nullptr)
			: data_(std::forward<Args>(args)...), next_(next) {}

		template <typename Tx>
		friend constexpr bool operator==(const fwd_list_node<T>&, const fwd_list_node<T>&);

		T data_;
		fwd_list_node<T>* next_;
	};

	template <typename T>
	constexpr bool operator==(const fwd_list_node<T>& lhs, const fwd_list_node<T>& rhs)
    {
	    return lhs.data_ == rhs.data_;
    }

	template <typename T,
		typename Allocator = std::allocator<fwd_list_node<T>>>
	class forward_list {
	public:
	    struct iterator;
	    struct const_iterator;

		using value_type = T;
		using allocator_type = Allocator;
		using reference = T&;
		using const_reference = const T&;
		using pointer = T*;
		using const_pointer = const T*;

		constexpr forward_list()
		{
			before_start_->next_ = start_;
		}
		
		constexpr explicit forward_list(size_t n)
		{
			for (size_t i = 0; i < n; ++i) emplace_front();
			before_start_->next_ = start_;
		}

		constexpr explicit forward_list(size_t n, const T& val)
		{
			for (size_t i = 0; i < n; ++i) push_front(val);
			before_start_->next_ = start_;
		}

		constexpr forward_list(const forward_list& fwdlist)
		{
			for (auto it = fwdlist.begin(); it != fwdlist.end(); ++it)
				emplace_back(*it);
			before_start_->next_ = start_;
		}

		constexpr forward_list(forward_list&& fwdlist)
			: start_(std::move(fwdlist.start_))
		{
			fwdlist.start_ = nullptr;
			fwdlist.before_start_->next_ = nullptr;
			before_start_->next_ = start_;
		}

		constexpr forward_list(std::initializer_list<T> ilist)
		{
			for (auto it = std::rbegin(ilist); it != std::rend(ilist); ++it)
				emplace_front(*it);
			before_start_->next_ = start_;
		}

		constexpr forward_list& operator=(const forward_list& fwdlist)
		{
			forward_list copy(fwdlist);
			copy.swap(*this);
			return *this;
		}

		constexpr forward_list& operator=(forward_list&& fwdlist) noexcept
		{
			forward_list copy(std::move(fwdlist));
			copy.swap(*this);
			return *this;
		}

		constexpr forward_list& operator=(std::initializer_list<T> ilist)
		{
			forward_list copy(ilist);
			copy.swap(*this);
			return *this;
		}

		~forward_list()
		{
			clear();
			allocator_traits::deallocate(alloc_, before_start_, 1);
		}

		[[nodiscard]]
		constexpr bool empty() const noexcept { return is_null(start_); }

		constexpr reference front() noexcept
		{
			return start_->data_;
		}

		constexpr const_reference front() const noexcept
		{
			return start_->data_;
		}

		constexpr void push_front(const T& val)
		{
			if (is_null(start_)) {
				start_ = allocator_traits::allocate(alloc_, 1);
				allocator_traits::construct(alloc_, start_, val);
				before_start_->next_ = start_;
			} else {
				auto n = allocator_traits::allocate(alloc_, 1);
				allocator_traits::construct(alloc_, n, val, start_);
				start_ = n;
				before_start_->next_ = start_;
			}
		}

		constexpr void push_front(T&& val)
		{
			if (is_null(start_)) {
				start_ = allocator_traits::allocate(alloc_, 1);
				allocator_traits::construct(alloc_, start_, std::move(val));
				before_start_->next_ = start_;
			} else {
				auto n = allocator_traits::allocate(alloc_, 1);
				allocator_traits::construct(alloc_, n, std::move(val), start_);
				start_ = n;
				before_start_->next_ = start_;
			}
		}

		template <typename... Args>
		constexpr void emplace_front(Args&&... args)
		{
			if (is_null(start_)) {
				start_ = allocator_traits::allocate(alloc_, 1);
				allocator_traits::construct(alloc_, start_,
					std::forward<Args>(args)...);
				before_start_->next_ = start_;
			} else {
				auto n = allocator_traits::allocate(alloc_, 1);
				allocator_traits::construct(alloc_, n,
					std::forward<Args>(args)..., start_);
				start_ = n;
				before_start_->next_ = start_;
			}
		}

		constexpr void pop_front()
		{
			if (is_null(start_)) return;

			auto del = start_;
			start_ = start_->next_;
			allocator_traits::deallocate(alloc_, del, 1);
			before_start_->next_ = start_;
		}

		template <typename FwdIter>
		constexpr iterator insert_after(FwdIter pos, const T& val)
		{
			auto ins_pos = pos.ptr_->next_;
			auto n = allocator_traits::allocate(alloc_, 1);
			allocator_traits::construct(alloc_, n, val, ins_pos);
			pos.ptr_->next_ = n;
			before_start_->next_ = start_;
			return iterator(n);
		}

		template <typename FwdIter>
		constexpr iterator insert_after(FwdIter pos, T&& val)
		{
			auto ins_pos = pos.ptr_->next_;
			auto n = allocator_traits::allocate(alloc_, 1);
			allocator_traits::construct(alloc_, n, std::move(val), ins_pos);
			pos.ptr_->next_ = n;
			before_start_->next_ = start_;
			return iterator(n);
		}

		template <typename FwdIter>
		constexpr iterator
		insert_after(FwdIter pos, size_t count, const T& val)
		{
			if (count == 0) return pos;
			iterator it;
			for (size_t i = 0; i < count; ++i) it = insert_after(pos + i, val);
			before_start_->next_ = start_;
			return it;
		}

		template <typename FwdIter, typename InputIter>
		constexpr iterator
		insert_after(FwdIter pos, InputIter first, InputIter last)
		{
			if (first == last) return pos;
			iterator it = pos;
			iterator ret;
			for (auto iit = first; iit != last; ++iit) {
				ret = insert_after(it, *iit);
				++it;
			}
			before_start_->next_ = start_;
			return ret;
		}

		template <typename FwdIter>
		constexpr iterator
		insert_after(FwdIter pos, std::initializer_list<T> init)
		{
			if (init.begin() == init.end()) return pos;
			size_t i = 0;
			iterator ret;
			for (const auto& x : init) {
				ret = insert_after(pos + i, x);
				++i;
			}
			before_start_->next_ = start_;
			return ret;
		}

		template <typename FwdIter, typename... Args>
		constexpr iterator emplace_after(FwdIter pos, Args&&... args)
		{
			auto ins_pos = pos.ptr_->next_;
			auto n = allocator_traits::allocate(alloc_, 1);
			allocator_traits::construct(alloc_, n,
				std::forward<Args>(args)..., ins_pos);
			pos.ptr_->next_ = n;
			before_start_->next_ = start_;
			return iterator(n);
		}

		template <typename InputIter>
		constexpr iterator erase_after(InputIter pos)
		{
			auto del = pos.ptr_->next_;
			auto node = pos.ptr_;
			node->next_ = del->next_;
			allocator_traits::deallocate(alloc_, del, 1);
			before_start_->next_ = start_;
			return iterator(node->next_);
		}

        template <typename InputIter>
		constexpr iterator
		erase_after(InputIter first, InputIter last)
		{
			auto dist = distance(first, last);
			iterator it;
			for (ptrdiff_t i = 0; i < dist; ++i)
				it = erase_after(first);
			return it;
		}

		constexpr void clear() noexcept
		{
			if (is_null(start_)) return;

			fwd_list_node<T>* curr = start_;
			fwd_list_node<T>* next = nullptr;

			while (!is_null(curr)) {
				next = curr->next_;
				allocator_traits::deallocate(alloc_, curr, 1);
				curr = next;
			}

			start_ = nullptr;
			allocator_traits::deallocate(alloc_, before_start_, 1);
			before_start_ = nullptr;
		}

		constexpr iterator begin() noexcept
		{
			return iterator(start_);
		}

		constexpr const_iterator begin() const noexcept
		{
			return const_iterator(start_);
		}

		constexpr const_iterator cbegin() const noexcept
		{
			return const_iterator(start_);
		}

		constexpr iterator end() noexcept
		{
			return iterator(nullptr);
		}

		constexpr const_iterator end() const noexcept
		{
			return const_iterator(nullptr);
		}

		constexpr const_iterator cend() const noexcept
		{
			return const_iterator(nullptr);
		}

		constexpr iterator before_begin() noexcept
		{
			return iterator(before_start_);
		}

		constexpr const_iterator before_begin() const noexcept
		{
			return const_iterator(before_start_);
		}

		constexpr const_iterator cbefore_begin() const noexcept
		{
			return const_iterator(before_start_);
		}

        struct iterator {
            using iterator_category = forward_iterator_tag;
            using difference_type = std::ptrdiff_t;
            using value_type = T;
            using reference = T&;
            using const_reference = const T&;
            using pointer = T*;
            using const_pointer = const T*;
            using node_pointer = fwd_list_node<T>*;
            using const_node_pointer = const fwd_list_node<T>*;

            constexpr iterator() = default;

            constexpr explicit iterator(node_pointer ptr) : ptr_(ptr) {}

            constexpr explicit iterator(const_node_pointer ptr)
            : ptr_(const_cast<pointer>(ptr))
            {}

            constexpr explicit iterator(std::nullptr_t) : ptr_(nullptr) {}

            constexpr explicit iterator(const_iterator it)
            : ptr_(reinterpret_cast<node_pointer>(it))
            {}

            constexpr iterator(const iterator& other)
            : ptr_(other.ptr_)
            {}

            constexpr iterator(iterator&& other) noexcept
            : ptr_(other.ptr_)
            {}

            constexpr iterator& operator=(const iterator& other)
            {
                if (this == &other) return *this;
                iterator copy(other);
                copy.swap(*this);
                return *this;
            }

            constexpr iterator& operator=(iterator&& other) noexcept
            {
                if (this == &other) return *this;
                iterator copy(std::move(other));
                copy.swap(*this);
                return *this;
            }

            constexpr iterator& operator++()
            {
                ptr_ = ptr_->next_;
                return *this;
            }

            constexpr const iterator operator++(int) const
            {
                iterator tmp = *this;
                ++(*this);
                return tmp;
            }

            constexpr reference operator*()
            {
                return ptr_->data_;
            }

            constexpr const_reference operator*() const
            {
                return ptr_->data_;
            }

            constexpr explicit operator node_pointer() const
            {
                return ptr_;
            }

            constexpr explicit operator const_node_pointer() const
            {
                return reinterpret_cast<const_node_pointer>(ptr_);
            }

            constexpr bool operator==(const iterator& other) const
            {
                return ptr_ == other.ptr_;
            }

            constexpr bool operator!=(const iterator& other) const
            {
                return ptr_ != other.ptr_;
            }

            constexpr void swap(iterator& other)
            {
                ftl::swap(other.ptr_, ptr_);
            }

            friend constexpr iterator operator+(const iterator& iter, int n)
            {
                auto tmp = iter;
                for (int i = 0; i < n; ++i)
                    if (tmp.ptr_) ++tmp;
                return tmp;
            }

            friend constexpr iterator operator+(const iterator& iter, size_t n)
            {
                auto tmp = iter;
                for (size_t i = 0; i < n; ++i)
                    if (tmp.ptr_) ++tmp;
                return tmp;
            }
        protected:
            node_pointer ptr_;
            template <typename U, typename Alloc>
            friend class forward_list;
        };

        struct const_iterator {
            using iterator_category = forward_iterator_tag;
            using difference_type = std::ptrdiff_t;
            using value_type = T;
            using reference = T&;
            using const_reference = const T&;
            using pointer = T*;
            using const_pointer = const T*;
            using node_pointer = fwd_list_node<T>*;
            using const_node_pointer = const fwd_list_node<T>*;

            constexpr const_iterator() = default;

            constexpr explicit const_iterator(node_pointer ptr) : ptr_(ptr) {}

            constexpr explicit const_iterator(const_node_pointer ptr)
            : ptr_(const_cast<node_pointer>(ptr))
            {}

            constexpr explicit const_iterator(std::nullptr_t) : ptr_(nullptr) {}

            constexpr explicit const_iterator(iterator it)
            : ptr_(reinterpret_cast<node_pointer>(it))
            {}

            constexpr const_iterator(const const_iterator& other)
            : ptr_(other.ptr_)
            {}

            constexpr const_iterator(const_iterator&& other) noexcept
            : ptr_(other.ptr_)
            {}

            constexpr const_iterator& operator=(const const_iterator& other)
            {
                if (this == &other) return *this;
                const_iterator copy(other);
                copy.swap(*this);
                return *this;
            }

            constexpr const_iterator& operator=(const_iterator&& other) noexcept
            {
                if (this == &other) return *this;
                const_iterator copy(std::move(other));
                copy.swap(*this);
                return *this;
            }

            constexpr const const_iterator& operator++()
            {
                ptr_ = ptr_->next_;
                return *this;
            }

            constexpr const const_iterator operator++(int)
            {
                const_iterator tmp = *this;
                ++(*this);
                return tmp;
            }

            constexpr const_reference operator*() const
            {
                return ptr_->data_;
            }

            constexpr bool operator==(const const_iterator& other) const
            {
                return ptr_ == other.ptr_;
            }

            constexpr bool operator!=(const const_iterator& other) const
            {
                return ptr_ != other.ptr_;
            }

            constexpr void swap(const_iterator& other)
            {
                ftl::swap(other.ptr_, ptr_);
            }

            friend constexpr const_iterator
            operator+(const const_iterator& iter, int n)
            {
                auto tmp = iter;
                for (int i = 0; i < n; ++i)
                    if (tmp.ptr_) ++tmp;
                return tmp;
            }

            friend constexpr const_iterator
            operator+(const const_iterator& iter, size_t n)
            {
                auto tmp = iter;
                for (size_t i = 0; i < n; ++i)
                    if (tmp.ptr_) ++tmp;
                return tmp;
            }
        protected:
            node_pointer ptr_;
        };

	private:
		template <typename... Args>
		constexpr void emplace_back(Args&&... args)
		{
			if (is_null(start_))
				return emplace_front(std::forward<Args>(args)...);
			auto cp = start_;
			while (!is_null(cp->next_)) cp = cp->next_;
			cp->next_ = allocator_traits::allocate(alloc_, 1);
			allocator_traits::construct(alloc_, cp->next_,
				std::forward<Args>(args)...);
		}

		using allocator_traits = std::allocator_traits<Allocator>;
		using list_type = fwd_list_node<T>*;

		list_type start_ = nullptr;
		list_type before_start_ = allocator_traits::allocate(alloc_, 1);
		allocator_type alloc_;
	};
}

#endif
