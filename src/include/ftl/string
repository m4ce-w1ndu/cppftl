#ifndef FTL_STRING
#define FTL_STRING

#include "iterator"
#include "utility"
#include <algorithm>
#include <exception>
#include <stdexcept>
#include <cmath>

namespace ftl {
	template <
		typename CharT,
		class Allocator = std::allocator<CharT>
	>
	class basic_string {
	public:
		using value_type = CharT;
		using allocator_type = Allocator;
		using size_type = typename std::allocator_traits<Allocator>::size_type;
		using difference_type =
			typename std::allocator_traits<Allocator>::difference_type;
		using reference = CharT&;
		using const_reference = const CharT&;
		using pointer = CharT*;
		using const_pointer = const CharT*;
		struct iterator;
		struct const_iterator;
		using reverse_iterator = ftl::reverse_iterator<iterator>;
		using const_reverse_iterator = ftl::const_reverse_iterator<iterator>;

		static const size_type npos = -1;

		constexpr explicit basic_string(const Allocator& alloc) noexcept
		: b_(const_cast<CharT*>(empty_str_)), s_(0), c_(sbsize_), a_(alloc)
		{
			memset(sb_, 0, sbsize_);
		}

		constexpr basic_string() noexcept : basic_string(Allocator()) {}

		constexpr basic_string(size_type count,
			CharT ch, const Allocator& alloc = Allocator())
		: b_(sb_), s_(count), c_(sbsize_), a_(alloc)
		{
			if (s_ >= sbsize_) {
				c_ = smart_alloc_(count + 1);
				b_ = allocator_traits::allocate(a_, c_);
			}
			std::fill_n(b_, s_, ch);
			b_[s_] = 0;
		}

		constexpr basic_string(const basic_string& other, size_type pos,
			const Allocator& alloc = Allocator())
		: b_(sb_), s_(other.size() - pos), c_(sbsize_), a_(alloc)
		{
			if (s_ >= sbsize_) {
				c_ = smart_alloc_(s_ + 1);
				b_ = allocator_traits::allocate(a_, c_);
			}
			std::copy(other.b_ + pos, other.b_ + other.size(), b_);
			b_[s_] = 0;
		}

		constexpr basic_string(const basic_string& other, size_type pos,
			size_type count,
			const Allocator& alloc = Allocator())
		: b_(sb_), s_(other.size() - pos - count), c_(sbsize_), a_(alloc)
		{
			if (s_ >= sbsize_) {
				c_ = smart_alloc_(s_ + 1);
				b_ = allocator_traits::allocate(a_, c_);
			}
			std::copy_n(other.b_ + pos, count, b_);
			b_[s_] = 0;
		}

		constexpr basic_string(const CharT* s, size_type count,
								const Allocator& alloc = Allocator())
		: b_(sb_), c_(sbsize_), a_(alloc)
		{
			s_ = count <= ctstrlen(s) ? ctstrlen(s) - count : ctstrlen(s);
			if (s_ >= sbsize_) {
				c_ = smart_alloc_(s_ + 1);
				b_ = allocator_traits::allocate(a_, c_);
			}
			std::copy_n(s, count, b_);
			b_[s_] = 0;
		}

		constexpr basic_string(const CharT* s,
							   const Allocator& alloc = Allocator())
		: b_(sb_), s_(ctstrlen(s)), c_(sbsize_), a_(alloc)
		{
			if (s_ >= sbsize_) {
				c_ = smart_alloc_(s_ + 1);
				b_ = allocator_traits::allocate(a_, c_);
			}
			std::copy(s, s + s_, b_);
			b_[s_] = 0;
		}

		template <typename InputIt>
		constexpr basic_string(InputIt first, InputIt last,
			const Allocator& alloc = Allocator())
		: b_(sb_), s_(distance(first, last)), c_(sbsize_), a_(alloc)
		{
			if (s_ >= sbsize_) {
				c_ = smart_alloc_(s_ + 1);
				b_ = allocator_traits::allocate(a_, c_);
			}
			std::copy(first, last, b_);
			b_[s_] = 0;
		}

		constexpr basic_string(const basic_string& other,
			const Allocator& alloc)
		: b_(sb_), s_(other.s_), c_(sbsize_), a_(alloc)
		{
			if (s_ >= sbsize_) {
				c_ = other.c_;
				b_ = allocator_traits::allocate(a_, c_);
			}
			std::copy(other.b_, other.b_ + other.size(), b_);
			b_[s_] = 0;
		}

		constexpr basic_string(const basic_string& other)
		: b_(sb_), s_(other.s_), c_(sbsize_), a_(other.a_)
		{
			if (s_ >= sbsize_) {
				c_ = other.c_;
				b_ = allocator_traits::allocate(a_, c_);
			}
			std::copy(other.b_, other.b_ + other.size(), b_);
			b_[s_] = 0;
		}

		constexpr basic_string(basic_string&& other, const Allocator& alloc)
		: b_(sb_), s_(other.s_), c_(other.c_),
			a_(alloc)
		{
			if (s_ >= sbsize_) {
				b_ = other.b_;
				other.b_ = nullptr;
			} else std::copy(other.begin(), other.end(), sb_);
		}

		constexpr basic_string(basic_string&& other) noexcept
		: b_(sb_), s_(other.s_), c_(other.c_),
			a_(other.a_)
		{
			if (s_ >= sbsize_) {
				b_ = other.b_;
				other.b_ = nullptr;
			} else std::copy(other.begin(), other.end(), sb_);
		}

		constexpr basic_string(std::initializer_list<CharT> init,
			const Allocator& alloc = Allocator())
		: b_(sb_), s_(init.size()), c_(sbsize_), a_(alloc)
		{
			if (s_ >= sbsize_) {
				c_ = smart_alloc_(s_ + 1);
				b_ = allocator_traits::allocate(a_, c_);
			}
			std::copy(init.begin(), init.end(), b_);
			b_[s_] = 0;
		}

		~basic_string()
		{
			if (c_ > sbsize_) allocator_traits::deallocate(a_, b_, c_);
		}

		constexpr basic_string& operator=(const basic_string& str)
		{
			basic_string copy(str);
			copy.swap(*this);
			return *this;
		}

		constexpr basic_string& operator=(basic_string&& str) noexcept
		{
			basic_string copy(std::move(str));
			copy.swap(*this);
			return *this;
		}

		constexpr basic_string& operator=(const CharT* s)
		{
			basic_string n(s);
			n.swap(*this);
			return *this;
		}

		constexpr basic_string& operator=(CharT ch)
		{
			basic_string n(ch, 1);
			n.swap(*this);
			return *this;
		}

		constexpr basic_string& operator=(std::initializer_list<CharT> init)
		{
			basic_string n(init);
			n.swap(*this);
			return *this;
		}

		constexpr allocator_type get_allocator() const
		{
			return a_;
		}

		[[nodiscard]] constexpr bool empty() const noexcept
		{
			return (c_ == 0 || s_ == 0 || b_ == empty_str_
					|| begin() == end());
		}

		constexpr size_type size() const noexcept
		{
			return s_;
		}

		constexpr size_type length() const noexcept
		{
			return s_;
		}

		constexpr static size_type max_size() noexcept
		{
			return std::numeric_limits<std::size_t>::max() / sizeof(CharT);
		}

		constexpr size_type capacity() const noexcept
		{
			return c_;
		}

		constexpr reference front()
		{
			return *b_;
		}

		constexpr const_reference front() const
		{
			return *b_;
		}

		constexpr reference back()
		{
			return *(b_ + s_ - 1);
		}

		constexpr const_reference back() const
		{
			return *(b_ + s_ - 1);
		}

		constexpr pointer data() noexcept
		{
			return b_;
		}

		constexpr const_pointer data() const noexcept
		{
			return b_;
		}

		constexpr const_pointer c_str() const noexcept
		{
			return b_;
		}

		constexpr reference at(size_type pos)
		{
			if (pos >= size())
				throw std::out_of_range("string index out of range");
			return *(b_ + pos);
		}

		constexpr const_reference at(size_type pos) const
		{
			if (pos >= size())
				throw std::out_of_range("string index out of range");
			return *(b_ + pos);
		}

		constexpr reference operator[](size_type pos) noexcept
		{
			return *(b_ + pos);
		}

		constexpr const_reference operator[](size_type pos) const noexcept
		{
			return *(b_ + pos);
		}

		constexpr iterator begin() noexcept
		{
			return iterator(b_);
		}

		constexpr const_iterator begin() const noexcept
		{
			return const_iterator(b_);
		}

		constexpr const_iterator cbegin() const noexcept
		{
			return const_iterator(b_);
		}

		constexpr iterator end() noexcept
		{
			return iterator(b_ + s_);
		}

		constexpr const_iterator end() const noexcept
		{
			return const_iterator(b_ + s_);
		}

		constexpr const_iterator cend() const noexcept
		{
			return const_iterator(b_ + s_);
		}

		constexpr reverse_iterator rbegin() noexcept
		{
			return reverse_iterator(b_ + s_);
		}

		constexpr const_reverse_iterator rbegin() const noexcept
		{
			return const_reverse_iterator(b_ + s_);
		}

		constexpr const_reverse_iterator crbegin() const noexcept
		{
			return const_reverse_iterator(b_ + s_);
		}

		constexpr reverse_iterator rend() noexcept
		{
			return reverse_iterator(b_ - 1);
		}

		constexpr const_reverse_iterator rend() const noexcept
		{
			return const_reverse_iterator(b_ - 1);
		}

		constexpr const_reverse_iterator crend() const noexcept
		{
			return const_reverse_iterator(b_ - 1);
		}

		constexpr void push_back(CharT ch)
		{
			++s_;
			if (s_ >= capacity()) reserve(smart_alloc_(capacity() + 1));
			b_[s_ - 1] = ch;
			b_[s_] = 0;
		}

		constexpr basic_string& append(size_type count, CharT ch)
		{
			for (size_type i = 0; i < count; ++i) push_back(ch);
			return *this;
		}

		constexpr basic_string& append(const basic_string& str)
		{
			for (auto it = str.begin(); it != str.end(); ++it) push_back(*it);
			return *this;
		}

		constexpr basic_string& append(const basic_string& str,
			size_type pos, size_type count = npos)
		{
			if (pos > str.size()) 
				throw std::out_of_range("position out of range");

			iterator start = str.begin() + pos;
			iterator end = count >= str.size() || count == npos ? str.end() : 
				str.begin() + pos + count;
			for (; start != end; ++start) push_back(*start);

			return *this;
		}

		constexpr basic_string& append(const CharT* s, size_type count)
		{
			if (s == nullptr) return *this;
			if (count >= ctstrlen(s)){
				for (; *s != 0; ++s)
					push_back(*s);
			}
			for (size_type i = 0; i < count; ++i)
				push_back(*(s + i));

			return *this;
		}

		constexpr basic_string& append(const CharT* s)
		{
			if (s == nullptr) return *this;
			for (; *s != 0; ++s) push_back(*s);

			return *this;
		}

		template <typename InputIt>
		constexpr basic_string& append(InputIt first, InputIt last)
		{
			for (; first != last; ++first) push_back(*first);
			return *this;
		}

		constexpr basic_string& append(std::initializer_list<CharT> init)
		{
			for (const auto& x : init) push_back(x);
			return *this;
		}

		constexpr basic_string& insert(size_type index, size_type count,
			CharT ch)
		{
			if (index > size())
				throw std::out_of_range("string index out of range");

			if (s_ + count >= c_) reserve(s_ + count);

			std::copy(b_ + index, b_ + s_, b_ + index + count);
			std::fill(b_ + index, b_ + index + count, ch);
			s_ += count;

			b_[s_] = 0;
			return *this;
		}

		constexpr basic_string& insert(size_type index, const CharT* s)
		{
			if (index > size())
				throw std::out_of_range("string index out of range");
			auto len = ctstrlen(s);

			if (s_ + len >= c_) reserve(s_ + len);

			std::copy(b_ + index, b_ + s_, b_ + index + len);
			std::copy(s, s + len, b_ + index);
			s_ += len;

			b_[s_] = 0;
			return *this;
		}

		constexpr basic_string& insert(size_type index, const CharT* s,
			size_type count)
		{
			if (index > size())
				throw std::out_of_range("string index out of range");
			auto len = count < ctstrlen(s) ? count : ctstrlen(s);

			if (s_ + len >= c_) reserve(s_ + len);

			std::copy(b_ + index, b_ + s_, b_ + index + len);
			std::copy(s, s + len, b_ + index);
			s_ += len;

			b_[s_] = 0;
			return *this;
		}

		constexpr basic_string& insert(size_type index, const basic_string& str)
		{
			if (index > size())
				throw std::out_of_range("string index out of range");

			if (s_ + str.size() >= c_) reserve(s_ + str.size());
			
			std::copy(b_ + index, b_ + s_, b_ + index + str.size());
			std::copy(str.begin(), str.end(), b_ + index);
			s_ += str.size();

			b_[s_] = 0;
			return *this;
		}

		constexpr iterator insert(const_iterator pos, CharT ch)
		{
			auto ptr = static_cast<pointer>(pos);

			if (s_ + 1 >= c_) reserve(s_ + 1);

			std::copy(ptr, b_ + s_, ptr + 1);
			*ptr = ch;
			s_ += 1;

			b_[s_] = 0;
			return iterator(ptr);
		}

		constexpr iterator insert(const_iterator pos, size_type count, CharT ch)
		{
			auto ptr = static_cast<pointer>(pos);

			if (s_ + count >= c_) reserve(s_ + count);

			std::copy(ptr, b_ + s_, ptr + count);
			for (auto p = ptr; p != ptr + count; ++p) *p = ch;

			s_ += count;
			b_[s_] = 0;

			return iterator(ptr);
		}

		template <typename InputIt>
		constexpr iterator insert(const_iterator pos, InputIt first, InputIt last)
		{
			auto dist = distance(first, last);
			auto ptr = static_cast<pointer>(pos);

			if (s_ + dist >= c_) reserve(s_ + dist);

			std::copy(ptr, b_ + s_, ptr + dist);
			std::copy(first, last, ptr);

			s_ += dist;
			b_[s_] = 0;
			return iterator(&(*pos));
		}

		constexpr iterator
		insert(const_iterator pos, std::initializer_list<CharT> init)
		{
			return insert(pos, init.begin(), init.end());
		}

		constexpr void pop_back()
		{
			if (!empty()) --s_;
		}

		constexpr basic_string& operator+=(const basic_string& str)
		{
			return append(str);
		}

		constexpr basic_string& operator+=(CharT ch)
		{
			push_back(ch);
			return *this;
		}

		constexpr basic_string& operator+=(const CharT* s)
		{
			return append(s);
		}

		constexpr basic_string& operator+=(std::initializer_list<CharT> init)
		{
			return append(init);
		}

		constexpr void reserve(size_type new_cap)
		{
			if (new_cap > max_size())
				throw std::length_error(
					"error: string capacity exceeds system limits"
			);
			if (new_cap <= c_) return;

			auto tmp = allocator_traits::allocate(a_, new_cap);
			std::copy(b_, b_ + s_, tmp);
			if (b_ != sb_) allocator_traits::deallocate(a_, b_, c_);
			c_ = new_cap;
			b_ = tmp;
			b_[s_] = 0;
		}

		constexpr void swap(basic_string& other) noexcept
		{
			std::swap(other.s_, s_);
			std::swap(other.c_, c_);
			std::swap(other.sb_, sb_);
			std::swap(other.b_, b_);
		}

		struct const_iterator {
			using iterator_category = random_access_iterator_tag;
			using difference_type = std::ptrdiff_t;
			using value_type = CharT;
			using reference = CharT&;
			using const_reference = const CharT&;
			using pointer = CharT*;
			using const_pointer = const CharT*;

			constexpr const_iterator() = default;

			constexpr explicit const_iterator(pointer ptr) : ptr_(ptr) {}

			constexpr explicit const_iterator(const_pointer ptr)
					: ptr_(const_cast<pointer>(ptr))
			{}

			constexpr const_iterator(const const_iterator& other)
					: ptr_(other.ptr_)
			{}

			constexpr const_iterator(const_iterator&& other) noexcept
					: ptr_(other.ptr_)
			{}

			~const_iterator() = default;

			constexpr const_iterator& operator=(const const_iterator& other)
			{
				if (this == &other) return *this;
				const_iterator copy(other);
				copy.swap(*this);
				return *this;
			}

			constexpr const_iterator& operator=(const_iterator&& other) noexcept
			{
				if (this == &other) return *this;
				iterator copy(std::move(other));
				copy.swap(*this);
				return *this;
			}


			constexpr const const_iterator& operator++()
			{
				++ptr_;
				return *this;
			}

			constexpr const_iterator operator++(int)
			{
				const_iterator tmp = *this;
				++(*this);
				return tmp;
			}

			constexpr const const_iterator& operator--()
			{
				--ptr_;
				return *this;
			}

			constexpr const_iterator operator--(int)
			{
				const_iterator tmp = *this;
				--(*this);
				return tmp;
			}

			constexpr const_reference operator*() const
			{
				return *ptr_;
			}

			constexpr bool operator==(const const_iterator& other) const
			{
				return ptr_ == other.ptr_;
			}

			constexpr bool operator==(const iterator& other) const
			{
				return ptr_ == other.ptr_;
			}

			constexpr bool operator!=(const const_iterator& other) const
			{
				return ptr_ != other.ptr_;
			}

			constexpr bool operator!=(const iterator& other) const
			{
				return ptr_ != other.ptr_;
			}

			constexpr void swap(const_iterator& other) noexcept
			{
				ftl::swap(other.ptr_, ptr_);
			}

			friend constexpr const_iterator
			operator+(const const_iterator& iter, size_t n)
			{
				return const_iterator(iter.ptr_ + n);
			}

			friend constexpr const_iterator
			operator-(const const_iterator& iter, size_t n)
			{
				return const_iterator(iter.ptr_ - n);
			}

			friend constexpr const_iterator
			operator+(const const_iterator& lhs, const const_iterator& rhs)
			{
				auto dist = distance(lhs, rhs);
				return const_iterator(lhs.ptr_ + dist);
			}

			friend constexpr ptrdiff_t
			operator-(const const_iterator& lhs, const const_iterator& rhs)
			{
				return rhs.ptr_ - lhs.ptr_;
			}

			constexpr explicit operator pointer()
			{
				return ptr_;
			}

		protected:
			pointer ptr_;
		};

		struct iterator : public const_iterator {
			using iterator_category = random_access_iterator_tag;
			using difference_type = std::ptrdiff_t;
			using value_type = CharT;
			using reference = CharT&;
			using const_reference = const CharT&;
			using pointer = CharT*;
			using const_pointer = const CharT*;

			constexpr iterator() = default;

			constexpr explicit iterator(pointer ptr)
			: const_iterator(ptr) {}

			constexpr explicit iterator(const_pointer ptr)
			: const_iterator(const_cast<pointer>(ptr))
			{}

			constexpr iterator(const iterator& other)
			: const_iterator(other.ptr_)
			{}

			constexpr iterator(iterator&& other) noexcept
			: const_iterator(other.ptr_)
			{}

			~iterator() = default;

			constexpr iterator& operator=(const iterator& other)
			{
				if (this == &other) return *this;
				iterator copy(other);
				copy.swap(*this);
				return *this;
			}

			constexpr iterator& operator=(iterator&& other) noexcept
			{
				if (this == &other) return *this;
				iterator copy(std::move(other));
				copy.swap(*this);
				return *this;
			}

			constexpr iterator& operator++()
			{
				++const_iterator::ptr_;
				return *this;
			}

			constexpr const iterator& operator++() const
			{
				++const_iterator::ptr_;
				return *this;
			}

			constexpr iterator operator++(int) const
			{
				iterator tmp = *this;
				++(*this);
				return tmp;
			}

			constexpr iterator& operator--()
			{
				--const_iterator::ptr_;
				return *this;
			}

			constexpr const iterator& operator--() const
			{
				--const_iterator::ptr_;
				return *this;
			}

			constexpr iterator operator--(int)
			{
				iterator tmp = *this;
				--(*this);
				return tmp;
			}

			constexpr reference operator*()
			{
				return *const_iterator::ptr_;
			}

			constexpr const_reference operator*() const
			{
				return *const_iterator::ptr_;
			}

			constexpr bool operator==(const iterator& other) const
			{
				return const_iterator::ptr_ == other.ptr_;
			}

			constexpr bool operator==(const const_iterator& other) const
			{
				return const_iterator::ptr_ == other.ptr_;
			}

			constexpr bool operator!=(const iterator& other) const
			{
				return const_iterator::ptr_ != other.ptr_;
			}

			constexpr bool operator!=(const const_iterator& other) const
			{
				return const_iterator::ptr_ != &(*other);
			}

			constexpr void swap(iterator& other) noexcept
			{
				ftl::swap(other.ptr_, const_iterator::ptr_);
			}

			friend constexpr iterator operator+(const iterator& iter, int n)
			{
				return iterator(iter.ptr_ + n);
			}

			friend constexpr iterator operator-(const iterator& iter, int n)
			{
				return iterator(iter.ptr_ - n);
			}

			friend constexpr iterator operator+(const iterator& iter, size_t n)
			{
				return iterator(iter.ptr_ + n);
			}

			friend constexpr iterator operator-(const iterator& iter, size_t n)
			{
				return iterator(iter.ptr_ - n);
			}

			friend constexpr iterator
			operator+(const iterator& lhs, const iterator& rhs)
			{
				auto dist = distance(lhs, rhs);
				return iterator(lhs.ptr_ + dist);
			}

			friend constexpr difference_type operator-(
				const iterator& l, 
				const iterator& r)
			{
				auto x = l.ptr_ - r.ptr_;
				return x;
			}

			constexpr explicit operator pointer() const
			{
				return const_iterator::ptr_;
			}
		};

		friend constexpr bool operator==(
			const basic_string<CharT> l, const basic_string<CharT>& r)
		{
			return ((l.empty() && r.empty()) ||
					std::char_traits<CharT>::compare(l.b_, r.b_, 0) == 0);
		}
	private:
		constexpr size_type smart_alloc_(size_type c)
		{
			if constexpr (sizeof(size_type) == 8) {
				--c;
				c |= c >> 1;
				c |= c >> 2;
				c |= c >> 4;
				c |= c >> 8;
				c |= c >> 16;
				c |= c >> 32;
				++c;
				return c;
			}
			else if constexpr (sizeof(size_type) == 4) {
				--c;
				c |= c >> 1;
				c |= c >> 2;
				c |= c >> 4;
				c |= c >> 8;
				c |= c >> 16;
				++c;
				return c;
			}
			else {
				return std::pow(2, std::ceil(log(c) / log(2)));
			}
		}

		constexpr static size_type ctstrlen(const CharT* s)
		{
			return std::char_traits<CharT>::length(s);
		}

		using allocator_traits = std::allocator_traits<Allocator>;
		static constexpr size_t sbsize_ = 30;
		static constexpr const CharT* empty_str_ = "\0";
		CharT* b_;
		CharT sb_[sbsize_];
		size_type s_;
		size_type c_;
		Allocator a_;
	};

	// standard string type
	using string = ftl::basic_string<char>;

	template <typename CharT>
	constexpr bool operator==(
		const basic_string<CharT>& lhs, const basic_string<CharT>& rhs)
	{
		return std::char_traits<CharT>::compare(lhs.c_str(), rhs.c_str()) == 0;
	}

	template <typename CharT>
	constexpr bool operator==(
		basic_string<CharT>&& lhs, const basic_string<CharT>& rhs
	)
	{
		return std::char_traits<CharT>::compare(lhs.c_str(), rhs.c_str()) == 0;
	}

	template <typename CharT>
	constexpr bool operator==(
		const basic_string<CharT>& lhs, basic_string<CharT>&& rhs
	)
	{
		return std::char_traits<CharT>::compare(lhs.c_str(), rhs.c_str()) == 0;
	}
}

#endif
